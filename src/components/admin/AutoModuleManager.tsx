
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { 
  Bot, 
  Database, 
  Download, 
  AlertCircle, 
  CheckCircle,
  Clock,
  Code
} from 'lucide-react';
import { detectNewModules } from '@/utils/schema/moduleDetector';
import { generateHookCode, generateComponentCode } from '@/utils/schema/codeGenerator';
import { moduleRegistry } from '@/utils/moduleRegistry';

interface DetectedModule {
  tableName: string;
  moduleName: string;
  requiredFields: string[];
  optionalFields: string[];
  confidence: number;
  suggestedCustomColumns?: any[];
  isAutoGenerated: boolean;
}

const AutoModuleManager = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [detectedModules, setDetectedModules] = useState<DetectedModule[]>([]);
  const [scanProgress, setScanProgress] = useState(0);
  const [autoRegistrationEnabled, setAutoRegistrationEnabled] = useState(true);
  const { toast } = useToast();

  const handleScan = async () => {
    setIsScanning(true);
    setScanProgress(0);
    console.log('🔍 Starting real database schema scan...');

    try {
      // Simulate scanning progress
      const progressInterval = setInterval(() => {
        setScanProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 300);

      // Use real database detection
      const realModules = await detectNewModules();
      
      clearInterval(progressInterval);
      setScanProgress(100);
      
      // Transform the real data to match our interface
      const transformedModules = realModules.map(module => ({
        tableName: module.tableName,
        moduleName: module.moduleName,
        requiredFields: module.requiredFields,
        optionalFields: module.optionalFields || [],
        confidence: Math.round((module.confidence || 0) * 100),
        suggestedCustomColumns: module.suggestedCustomColumns || [],
        isAutoGenerated: module.isAutoGenerated || true
      }));

      setDetectedModules(transformedModules);
      setIsScanning(false);
      
      console.log(`✅ Real database scan completed. Found ${transformedModules.length} modules`);
      
      toast({
        title: "Database Scan Complete",
        description: `Detected ${transformedModules.length} modules from real database tables`,
      });
      
    } catch (error) {
      console.error('❌ Real database scan failed:', error);
      setIsScanning(false);
      setScanProgress(0);
      
      toast({
        title: "Scan Failed",
        description: "Failed to scan database. Check console for details.",
        variant: "destructive",
      });
    }
  };

  const handleGenerateCode = async (module: DetectedModule) => {
    console.log(`🔧 Generating real boilerplate code for ${module.moduleName}...`);
    
    try {
      // Use real code generation
      const moduleConfig = {
        tableName: module.tableName,
        moduleName: module.moduleName,
        requiredFields: module.requiredFields,
        optionalFields: module.optionalFields,
        isAutoGenerated: true,
        confidence: module.confidence / 100,
        suggestedCustomColumns: module.suggestedCustomColumns || []
      };

      const hookCode = generateHookCode(moduleConfig);
      const componentCode = generateComponentCode(moduleConfig);
      
      // Create downloadable files
      const hookBlob = new Blob([hookCode], { type: 'text/typescript' });
      const componentBlob = new Blob([componentCode], { type: 'text/typescript' });
      
      const hookUrl = URL.createObjectURL(hookBlob);
      const componentUrl = URL.createObjectURL(componentBlob);
      
      const hookLink = document.createElement('a');
      hookLink.href = hookUrl;
      hookLink.download = `use${module.moduleName}.tsx`;
      hookLink.click();
      
      const componentLink = document.createElement('a');
      componentLink.href = componentUrl;
      componentLink.download = `${module.moduleName}Module.tsx`;
      componentLink.click();
      
      URL.revokeObjectURL(hookUrl);
      URL.revokeObjectURL(componentUrl);
      
      toast({
        title: "Code Generated",
        description: `Generated real boilerplate files for ${module.moduleName}`,
      });
      
    } catch (error) {
      console.error('Code generation error:', error);
      toast({
        title: "Generation Failed",
        description: "Failed to generate code files.",
        variant: "destructive",
      });
    }
  };

  const handleAutoRegister = async (module: DetectedModule) => {
    if (module.confidence >= 80) {
      console.log(`✅ Auto-registering high-confidence module: ${module.moduleName}`);
      
      try {
        // Register with the real module registry
        moduleRegistry.register({
          moduleName: module.moduleName,
          tableName: module.tableName,
          requiredFields: module.requiredFields,
          optionalFields: module.optionalFields,
          version: '1.0.0',
          lastUpdated: new Date().toISOString(),
          dependencies: [],
          status: 'active' as const,
          isAutoGenerated: true,
          confidence: module.confidence / 100,
          description: `Auto-detected module for table: ${module.tableName}`
        });
        
        toast({
          title: "Module Registered",
          description: `Successfully registered ${module.moduleName}`,
        });
        
        // Remove the module from the detected list
        setDetectedModules(prev => prev.filter(m => m.tableName !== module.tableName));
        
      } catch (error) {
        console.error('Auto-registration error:', error);
        toast({
          title: "Registration Failed",
          description: "Failed to register module.",
          variant: "destructive",
        });
      }
    } else {
      console.log(`⚠️ Module confidence too low for auto-registration: ${module.confidence}%`);
      toast({
        title: "Confidence Too Low",
        description: `Module confidence (${module.confidence}%) is below 80% threshold`,
        variant: "destructive",
      });
    }
  };

  const handleDownloadTemplate = (module: DetectedModule) => {
    console.log(`📥 Downloading template for ${module.moduleName}...`);
    handleGenerateCode(module);
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return 'bg-green-100 text-green-800';
    if (confidence >= 60) return 'bg-yellow-100 text-yellow-800';
    return 'bg-red-100 text-red-800';
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bot className="h-5 w-5" />
          Auto Module Detection
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-muted-foreground">
              Automatically detect new database tables and generate module templates from real schema
            </p>
          </div>
          <Button 
            onClick={handleScan} 
            disabled={isScanning}
            className="flex items-center gap-2"
          >
            <Database className="h-4 w-4" />
            {isScanning ? 'Scanning...' : 'Scan Database'}
          </Button>
        </div>

        {isScanning && (
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Scanning real database schema...</span>
              <span>{scanProgress}%</span>
            </div>
            <Progress value={scanProgress} className="w-full" />
          </div>
        )}

        {detectedModules.length > 0 && (
          <div className="space-y-4">
            <h3 className="font-medium flex items-center gap-2">
              <AlertCircle className="h-4 w-4" />
              Real Detected Modules ({detectedModules.length})
            </h3>
            
            {detectedModules.map((module, index) => (
              <Card key={index} className="border-l-4 border-l-blue-500">
                <CardContent className="pt-4">
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <h4 className="font-medium">{module.moduleName}</h4>
                      <p className="text-sm text-muted-foreground">
                        Real Table: <code className="bg-gray-100 px-1 rounded">{module.tableName}</code>
                      </p>
                    </div>
                    <Badge className={getConfidenceColor(module.confidence)}>
                      {module.confidence}% confident
                    </Badge>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-sm font-medium mb-1">Required Fields:</p>
                      <div className="flex flex-wrap gap-1">
                        {module.requiredFields.map(field => (
                          <Badge key={field} variant="outline" className="text-xs">
                            {field}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <div>
                      <p className="text-sm font-medium mb-1">Optional Fields:</p>
                      <div className="flex flex-wrap gap-1">
                        {module.optionalFields.map(field => (
                          <Badge key={field} variant="secondary" className="text-xs">
                            {field}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      onClick={() => handleGenerateCode(module)}
                      className="flex items-center gap-1"
                    >
                      <Code className="h-3 w-3" />
                      Generate Code
                    </Button>
                    
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleDownloadTemplate(module)}
                      className="flex items-center gap-1"
                    >
                      <Download className="h-3 w-3" />
                      Download
                    </Button>

                    {module.confidence >= 80 && autoRegistrationEnabled && (
                      <Button
                        size="sm"
                        variant="secondary"
                        onClick={() => handleAutoRegister(module)}
                        className="flex items-center gap-1"
                      >
                        <CheckCircle className="h-3 w-3" />
                        Auto Register
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {detectedModules.length === 0 && !isScanning && (
          <div className="text-center py-8 text-muted-foreground">
            <Database className="h-12 w-12 mx-auto mb-2 opacity-50" />
            <p>No new modules detected from real database. Click "Scan Database" to check for new tables.</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default AutoModuleManager;
