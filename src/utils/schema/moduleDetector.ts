
/**
 * Module Detection Utilities
 * Focused on detecting and analyzing new modules
 */

import { supabase } from '@/integrations/supabase/client';
import { moduleRegistry } from '../moduleRegistry';
import { SchemaAnalysis, analyzeTable, calculateConfidence } from './schemaAnalyzer';
import { AutoModuleConfig } from './types';

/**
 * Scans the database schema and returns analysis for all tables
 */
export const scanDatabaseSchema = async (): Promise<SchemaAnalysis[]> => {
  console.log('üîç Scanning database schema for new tables...');
  
  try {
    // Use direct query to get known tables from the public schema
    const { data: knownTables, error } = await supabase
      .from('modules')
      .select('name');

    if (error) {
      console.error('‚ùå Error fetching existing modules:', error);
    }

    // Return analysis for known tables as we cannot execute raw SQL
    return await analyzeKnownTables();
    
  } catch (error) {
    console.error('‚ùå Schema scanning failed:', error);
    // Return analysis for known tables as fallback
    return await analyzeKnownTables();
  }
};

/**
 * Fallback method to analyze known tables
 */
const analyzeKnownTables = async (): Promise<SchemaAnalysis[]> => {
  const knownTables = ['profiles', 'facilities', 'modules', 'roles', 'permissions'];
  const analyses: SchemaAnalysis[] = [];
  
  for (const tableName of knownTables) {
    const analysis = await analyzeTable(tableName);
    if (analysis) {
      analyses.push(analysis);
    }
  }
  
  return analyses;
};

/**
 * Auto-detects new tables and suggests module configurations
 */
export const detectNewModules = async (): Promise<AutoModuleConfig[]> => {
  console.log('üîç Detecting new modules...');
  
  const analyses = await scanDatabaseSchema();
  const existingModules = moduleRegistry.getAll();
  const existingTableNames = existingModules.map(m => m.tableName);

  const newModules: AutoModuleConfig[] = [];

  for (const analysis of analyses) {
    // Skip if module already exists
    if (existingTableNames.includes(analysis.tableName)) {
      continue;
    }

    // Calculate confidence score
    const confidence = calculateConfidence(analysis);

    // Generate suggested custom columns
    const suggestedCustomColumns = generateCustomColumns(analysis);

    const autoConfig: AutoModuleConfig = {
      tableName: analysis.tableName,
      moduleName: analysis.suggestedModuleName,
      requiredFields: analysis.suggestedRequiredFields,
      optionalFields: analysis.suggestedOptionalFields,
      isAutoGenerated: true,
      confidence,
      suggestedCustomColumns
    };

    newModules.push(autoConfig);
  }

  console.log(`‚úÖ Detected ${newModules.length} new modules`);
  return newModules;
};

/**
 * Generates suggested custom columns based on table structure
 */
const generateCustomColumns = (analysis: SchemaAnalysis) => {
  const columns = [];

  // Add name column if exists
  if (analysis.columns.some(col => col.name === 'name' || col.name === 'title')) {
    columns.push({
      key: 'name',
      header: 'Name',
      type: 'text' as const
    });
  }

  // Add status column if exists
  if (analysis.hasStatus) {
    columns.push({
      key: 'status',
      header: 'Status',
      type: 'status' as const
    });
  }

  // Add created_at if exists
  if (analysis.hasCreatedAt) {
    columns.push({
      key: 'created_at',
      header: 'Created',
      type: 'date' as const
    });
  }

  return columns;
};
