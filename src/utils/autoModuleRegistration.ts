
/**
 * Auto Module Registration System
 */

import { moduleRegistry } from './moduleRegistry';
import { detectNewModules } from './schema/moduleDetector';

export interface AutoRegistrationResult {
  autoRegistered?: any[];
  needsReview?: any[];
  totalScanned: number;
}

class AutoModuleWatcher {
  private isRunning = false;
  private interval: NodeJS.Timeout | null = null;
  private listeners: Set<(result: AutoRegistrationResult) => void> = new Set();

  start() {
    if (this.isRunning) return;
    
    console.log('üëÄ Starting auto-module watcher...');
    this.isRunning = true;
    
    this.interval = setInterval(async () => {
      try {
        const result = await autoRegisterModules();
        this.notifyListeners(result);
      } catch (error) {
        console.error('Auto-registration error:', error);
      }
    }, 30000); // Every 30 seconds
  }

  stop() {
    if (!this.isRunning) return;
    
    console.log('‚èπÔ∏è Stopping auto-module watcher...');
    this.isRunning = false;
    
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
  }

  onUpdate(listener: (result: AutoRegistrationResult) => void) {
    this.listeners.add(listener);
    return () => this.listeners.delete(listener);
  }

  private notifyListeners(result: AutoRegistrationResult) {
    this.listeners.forEach(listener => listener(result));
  }
}

export const autoModuleWatcher = new AutoModuleWatcher();

export const autoRegisterModules = async (): Promise<AutoRegistrationResult> => {
  console.log('üîÑ Starting automatic module registration...');
  
  try {
    const detectedModules = await detectNewModules();
    const autoRegistered: any[] = [];
    const needsReview: any[] = [];

    for (const module of detectedModules) {
      if (module.confidence >= 0.8) {
        // Auto-register high confidence modules
        console.log(`üìù Auto-registering module: ${module.moduleName}`);
        
        moduleRegistry.register({
          ...module,
          version: '1.0.0',
          lastUpdated: new Date().toISOString(),
          dependencies: [],
          status: 'active' as const,
          isAutoGenerated: true,
          description: `Auto-detected module for ${module.tableName}`
        });

        autoRegistered.push(module);
        
        // Log boilerplate generation info
        console.log(`‚úÖ Generated boilerplate for ${module.moduleName}`);
        console.log(`Hook: src/hooks/use${module.moduleName}.tsx`);
        console.log(`Component: src/components/${module.moduleName}Module.tsx`);
      } else {
        needsReview.push(module);
      }
    }

    const result: AutoRegistrationResult = {
      autoRegistered,
      needsReview,
      totalScanned: detectedModules.length
    };

    console.log(`‚úÖ Auto-registered ${autoRegistered.length} high-confidence modules`);
    return result;
    
  } catch (error) {
    console.error('‚ùå Auto-registration failed:', error);
    return {
      totalScanned: 0
    };
  }
};
