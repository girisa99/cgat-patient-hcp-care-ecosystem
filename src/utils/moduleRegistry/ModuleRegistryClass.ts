
/**
 * Module Registry Class - Enhanced Implementation
 */

import { ComponentServiceInfo, RegisteredModule, AutoRegistrationConfig, RegistryStats } from './types';

export class ModuleRegistry {
  private modules: Map<string, RegisteredModule> = new Map();
  private autoConfig: AutoRegistrationConfig = {
    enabled: false,
    confidenceThreshold: 0.8,
    scanIntervalMs: 30000,
    autoGenerateCode: true,
    trackComponents: true,
    trackServices: true
  };

  register(module: RegisteredModule) {
    this.modules.set(module.moduleName, module);
    console.log(`✅ Module registered: ${module.moduleName}`);
  }

  get(moduleName: string): RegisteredModule | undefined {
    return this.modules.get(moduleName);
  }

  getAll(): RegisteredModule[] {
    return Array.from(this.modules.values());
  }

  unregister(moduleName: string): boolean {
    return this.modules.delete(moduleName);
  }

  isRegistered(moduleName: string): boolean {
    return this.modules.has(moduleName);
  }

  getActiveModules(): RegisteredModule[] {
    return this.getAll().filter(module => module.status === 'active');
  }

  getAutoGeneratedModules(): RegisteredModule[] {
    return this.getAll().filter(module => module.isAutoGenerated === true);
  }

  addComponentToModule(moduleName: string, component: ComponentServiceInfo): void {
    const module = this.modules.get(moduleName);
    if (!module) {
      console.warn(`Module ${moduleName} not found`);
      return;
    }

    if (!module.components) module.components = [];
    module.components.push(component);
    module.lastUpdated = new Date();
  }

  import(data: { modules: RegisteredModule[]; config: AutoRegistrationConfig; stats: RegistryStats }): void {
    this.modules.clear();
    data.modules.forEach(module => {
      this.modules.set(module.moduleName, module);
    });
    this.autoConfig = data.config;
    console.log(`✅ Registry imported with ${data.modules.length} modules`);
  }

  getStats(): RegistryStats {
    const modules = this.getAll();
    const allComponents = this.getAllComponents();
    const tablesUsed = [...new Set(modules.map(m => m.tableName))].length;
    const lastRegistration = modules.length > 0 ? 
      Math.max(...modules.map(m => new Date(m.lastUpdated).getTime())) : null;
    
    return {
      total: modules.length,
      active: modules.filter(m => m.status === 'active').length,
      deprecated: modules.filter(m => m.status === 'deprecated').length,
      development: modules.filter(m => m.status === 'development').length,
      autoGenerated: modules.filter(m => m.isAutoGenerated).length,
      totalComponents: allComponents.filter(c => c.component.type === 'component').length,
      totalServices: allComponents.filter(c => c.component.type === 'service').length,
      totalHooks: allComponents.filter(c => c.component.type === 'hook').length,
      protectedComponents: allComponents.filter(c => c.component.isProtected).length,
      lastUpdated: new Date(),
      totalModules: modules.length,
      activeModules: modules.filter(m => m.status === 'active').length,
      tablesUsed,
      lastRegistration
    };
  }

  getAllComponents(): { moduleName: string; component: ComponentServiceInfo }[] {
    const result: { moduleName: string; component: ComponentServiceInfo }[] = [];
    
    this.modules.forEach((module, moduleName) => {
      const allItems = [
        ...(module.components || []),
        ...(module.services || []),
        ...(module.hooks || [])
      ];
      
      allItems.forEach(component => {
        result.push({ moduleName, component });
      });
    });
    
    return result;
  }

  getModuleComponentsForRBAC(moduleName: string): ComponentServiceInfo[] {
    const module = this.modules.get(moduleName);
    if (!module) {
      return [];
    }

    return [
      ...(module.components || []),
      ...(module.services || []),
      ...(module.hooks || [])
    ];
  }

  getAutoConfig(): AutoRegistrationConfig {
    return { ...this.autoConfig };
  }

  updateAutoConfig(config: Partial<AutoRegistrationConfig>): void {
    this.autoConfig = { ...this.autoConfig, ...config };
  }

  export(): { modules: RegisteredModule[]; config: AutoRegistrationConfig; stats: RegistryStats } {
    return {
      modules: this.getAll(),
      config: this.getAutoConfig(),
      stats: this.getStats()
    };
  }
}
