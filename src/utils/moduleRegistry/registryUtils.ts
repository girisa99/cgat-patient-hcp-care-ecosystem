
/**
 * Module Registry Utility Functions - Enhanced
 */

import { RegisteredModule, ComponentServiceInfo, AutoRegistrationConfig } from './types';
import { ModuleRegistry } from './ModuleRegistryClass';
import { enableAutoRegistration, disableAutoRegistration } from './autoRegistrationUtils';
import { registerComponentToModule } from './componentManagementUtils';

/**
 * Enhanced registration function
 */
export const registerNewModule = (registry: ModuleRegistry, module: Omit<RegisteredModule, 'lastUpdated'>) => {
  registry.register({
    ...module,
    lastUpdated: new Date().toISOString()
  });
};

/**
 * Re-export component registration functions
 */
export { registerComponentToModule };

/**
 * Re-export auto-registration functions
 */
export { enableAutoRegistration, disableAutoRegistration };

/**
 * Initialize registry with default modules
 */
export const initializeDefaultModules = (registry: ModuleRegistry) => {
  console.log('ðŸš€ Initializing module registry with real component detection...');

  const defaultModules: Omit<RegisteredModule, 'lastUpdated'>[] = [
    {
      moduleName: 'Users',
      tableName: 'profiles',
      requiredFields: ['email', 'first_name'],
      optionalFields: ['last_name', 'phone'],
      version: '1.0.0',
      dependencies: ['auth'],
      status: 'active',
      isAutoGenerated: false,
      description: 'User profile management system'
    },
    {
      moduleName: 'Facilities',
      tableName: 'facilities',
      requiredFields: ['name', 'facility_type'],
      optionalFields: ['address', 'phone'],
      version: '1.0.0',
      dependencies: [],
      status: 'active',
      isAutoGenerated: false,
      description: 'Healthcare facility management'
    },
    {
      moduleName: 'Modules',
      tableName: 'modules',
      requiredFields: ['name'],
      optionalFields: ['description'],
      version: '1.0.0',
      dependencies: [],
      status: 'active',
      isAutoGenerated: false,
      description: 'Module management and RBAC system'
    }
  ];

  defaultModules.forEach(module => {
    registerNewModule(registry, module);
  });

  console.log(`âœ… Initialized ${defaultModules.length} default modules`);
};

/**
 * Registry backup and restore utilities
 */
export const createRegistryBackup = (registry: ModuleRegistry) => {
  const backup = {
    timestamp: new Date().toISOString(),
    modules: registry.getAll(),
    config: registry.getAutoConfig(),
    stats: registry.getStats()
  };
  
  console.log('ðŸ’¾ Registry backup created');
  return backup;
};

export const restoreRegistryFromBackup = (
  registry: ModuleRegistry,
  backup: { modules: RegisteredModule[]; config?: AutoRegistrationConfig }
) => {
  registry.import(backup);
  console.log('ðŸ”„ Registry restored from backup');
};
