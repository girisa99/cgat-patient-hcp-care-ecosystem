
/**
 * Module Registry Utility Functions
 */

import { RegisteredModule, ComponentServiceInfo, AutoRegistrationConfig } from './types';
import { ModuleRegistry } from './ModuleRegistryClass';

/**
 * Enhanced registration function
 */
export const registerNewModule = (registry: ModuleRegistry, module: Omit<RegisteredModule, 'lastUpdated'>) => {
  registry.register({
    ...module,
    lastUpdated: new Date().toISOString()
  });
};

/**
 * Component registration functions
 */
export const registerComponentToModule = (registry: ModuleRegistry, moduleName: string, component: ComponentServiceInfo) => {
  registry.addComponentToModule(moduleName, component);
};

/**
 * Convenience functions for auto-registration
 */
export const enableAutoRegistration = (registry: ModuleRegistry, config?: Partial<AutoRegistrationConfig>) => {
  registry.updateAutoConfig({ enabled: true, ...config });
};

export const disableAutoRegistration = (registry: ModuleRegistry) => {
  registry.updateAutoConfig({ enabled: false });
};

/**
 * Initialize registry with default modules
 */
export const initializeDefaultModules = (registry: ModuleRegistry) => {
  console.log('ðŸš€ Initializing module registry with real component detection...');

  registry.register({
    moduleName: 'Users',
    tableName: 'profiles',
    requiredFields: ['email', 'first_name'],
    optionalFields: ['last_name', 'phone'],
    version: '1.0.0',
    lastUpdated: new Date().toISOString(),
    dependencies: ['auth'],
    status: 'active',
    isAutoGenerated: false,
    description: 'User profile management system'
    // components, hooks, services will be auto-detected by register method
  });

  registry.register({
    moduleName: 'Facilities',
    tableName: 'facilities',
    requiredFields: ['name', 'facility_type'],
    optionalFields: ['address', 'phone'],
    version: '1.0.0',
    lastUpdated: new Date().toISOString(),
    dependencies: [],
    status: 'active',
    isAutoGenerated: false,
    description: 'Healthcare facility management'
  });

  registry.register({
    moduleName: 'Modules',
    tableName: 'modules',
    requiredFields: ['name'],
    optionalFields: ['description'],
    version: '1.0.0',
    lastUpdated: new Date().toISOString(),
    dependencies: [],
    status: 'active',
    isAutoGenerated: false,
    description: 'Module management and RBAC system'
  });
};
