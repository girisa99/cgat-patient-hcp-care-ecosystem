
/**
 * Auto Registration Utilities
 */

import { RegisteredModule } from './types';
import { detectNewModules } from '@/utils/schema/moduleDetector';

export const autoScanAndRegister = async (): Promise<RegisteredModule[]> => {
  try {
    const detectedModules = await detectNewModules();
    
    // Convert detected modules to registered modules format
    const registeredModules: RegisteredModule[] = detectedModules
      .filter(module => module.confidence >= 0.8)
      .map(module => ({
        moduleName: module.moduleName,
        tableName: module.tableName,
        requiredFields: module.requiredFields,
        optionalFields: module.optionalFields || [],
        version: '1.0.0',
        lastUpdated: new Date(),
        status: 'active' as const,
        isAutoGenerated: true,
        confidenceScore: module.confidence,
        description: `Auto-detected module for table: ${module.tableName}`
      }));

    return registeredModules;
  } catch (error) {
    console.error('Auto-scan and register failed:', error);
    return [];
  }
};

export const getAutoRegistrationCandidates = async (): Promise<RegisteredModule[]> => {
  try {
    const detectedModules = await detectNewModules();
    
    return detectedModules.map(module => ({
      moduleName: module.moduleName,
      tableName: module.tableName,
      requiredFields: module.requiredFields,
      optionalFields: module.optionalFields || [],
      version: '1.0.0',
      lastUpdated: new Date(),
      status: 'development' as const,
      isAutoGenerated: true,
      confidenceScore: module.confidence,
      description: `Candidate module for table: ${module.tableName}`
    }));
  } catch (error) {
    console.error('Failed to get auto-registration candidates:', error);
    return [];
  }
};
