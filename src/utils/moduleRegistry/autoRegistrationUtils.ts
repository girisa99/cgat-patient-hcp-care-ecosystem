
/**
 * Auto Registration Utility Functions
 * Handles automatic module detection and registration logic
 */

import { RegisteredModule, AutoRegistrationConfig } from './types';
import { ModuleRegistry } from './ModuleRegistryClass';
import { scanForRealComponents, scanForRealHooks, scanForRealServices } from '../schema/componentScanner';

/**
 * Auto-registration helper functions
 */
export const enableAutoRegistration = (registry: ModuleRegistry, config?: Partial<AutoRegistrationConfig>) => {
  registry.updateAutoConfig({ enabled: true, ...config });
  console.log('‚úÖ Auto-registration enabled with config:', config);
};

export const disableAutoRegistration = (registry: ModuleRegistry) => {
  registry.updateAutoConfig({ enabled: false });
  console.log('‚ùå Auto-registration disabled');
};

/**
 * Scan and auto-register modules based on confidence threshold
 */
export const autoScanAndRegister = (registry: ModuleRegistry, candidateModules: string[]) => {
  const config = registry.getAutoConfig();
  
  if (!config.enabled) {
    console.log('‚è∏Ô∏è Auto-registration is disabled');
    return [];
  }

  const registeredModules: RegisteredModule[] = [];

  candidateModules.forEach(moduleName => {
    const components = scanForRealComponents(moduleName);
    const hooks = scanForRealHooks(moduleName);
    const services = scanForRealServices(moduleName);
    
    const totalItems = components.length + hooks.length + services.length;
    
    // Calculate confidence based on component detection
    const confidence = Math.min(totalItems * 0.2, 1.0);
    
    if (confidence >= config.confidenceThreshold) {
      const autoModule: RegisteredModule = {
        moduleName,
        tableName: moduleName.toLowerCase(),
        requiredFields: ['id'],
        optionalFields: [],
        version: '1.0.0',
        lastUpdated: new Date().toISOString(),
        dependencies: [],
        status: 'development',
        isAutoGenerated: true,
        confidence,
        description: `Auto-detected module with ${totalItems} components/services`,
        components,
        hooks,
        services
      };
      
      registry.register(autoModule);
      registeredModules.push(autoModule);
      
      console.log(`ü§ñ Auto-registered module: ${moduleName} (confidence: ${Math.round(confidence * 100)}%)`);
    } else {
      console.log(`‚ö†Ô∏è Module ${moduleName} below confidence threshold: ${Math.round(confidence * 100)}% < ${Math.round(config.confidenceThreshold * 100)}%`);
    }
  });

  return registeredModules;
};

/**
 * Get auto-registration candidates from the codebase
 */
export const getAutoRegistrationCandidates = (): string[] => {
  // This could be enhanced to scan the actual filesystem
  // For now, return common module patterns
  return [
    'Patients',
    'Users', 
    'Facilities',
    'Modules',
    'Roles',
    'Permissions',
    'Audit',
    'Dashboard',
    'Settings'
  ];
};
