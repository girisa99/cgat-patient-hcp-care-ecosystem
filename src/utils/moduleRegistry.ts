
/**
 * Module Registry System with Enhanced Type Safety
 */

export interface RegisteredModule {
  moduleName: string;
  tableName: string;
  requiredFields: string[];
  optionalFields?: string[]; // Add this missing property
  version: string;
  lastUpdated: string;
  dependencies: string[];
  status: 'active' | 'inactive' | 'deprecated';
  isAutoGenerated?: boolean;
  confidence?: number;
  description?: string;
  suggestedCustomColumns?: any[];
}

class ModuleRegistry {
  private modules: Map<string, RegisteredModule> = new Map();

  register(module: RegisteredModule) {
    this.modules.set(module.moduleName, module);
    console.log(`âœ… Module registered: ${module.moduleName}`);
  }

  get(moduleName: string): RegisteredModule | undefined {
    return this.modules.get(moduleName);
  }

  getAll(): RegisteredModule[] {
    return Array.from(this.modules.values());
  }

  unregister(moduleName: string): boolean {
    return this.modules.delete(moduleName);
  }

  isRegistered(moduleName: string): boolean {
    return this.modules.has(moduleName);
  }

  getActiveModules(): RegisteredModule[] {
    return this.getAll().filter(module => module.status === 'active');
  }

  getAutoGeneratedModules(): RegisteredModule[] {
    return this.getAll().filter(module => module.isAutoGenerated === true);
  }
}

export const moduleRegistry = new ModuleRegistry();
