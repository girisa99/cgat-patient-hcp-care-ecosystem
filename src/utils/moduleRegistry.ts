
/**
 * Module Registry System with Enhanced Type Safety
 */

// Import the correct types from the types file
export type { 
  ComponentServiceInfo, 
  RegisteredModule, 
  AutoRegistrationConfig, 
  RegistryStats 
} from './moduleRegistry/types';

export interface RegisteredModule {
  moduleName: string;
  tableName: string;
  requiredFields: string[];
  optionalFields?: string[];
  version: string;
  lastUpdated: string;
  dependencies: string[];
  status: 'active' | 'inactive' | 'deprecated' | 'development';
  isAutoGenerated?: boolean;
  confidence?: number;
  description?: string;
  suggestedCustomColumns?: any[];
  components?: ComponentServiceInfo[];
  services?: ComponentServiceInfo[];
  hooks?: ComponentServiceInfo[];
}

class ModuleRegistry {
  private modules: Map<string, RegisteredModule> = new Map();
  private autoConfig: AutoRegistrationConfig = {
    enabled: false,
    confidenceThreshold: 0.8,
    scanIntervalMs: 30000,
    autoGenerateCode: true,
    trackComponents: true,
    trackServices: true
  };

  register(module: RegisteredModule) {
    this.modules.set(module.moduleName, module);
    console.log(`âœ… Module registered: ${module.moduleName}`);
  }

  get(moduleName: string): RegisteredModule | undefined {
    return this.modules.get(moduleName);
  }

  getAll(): RegisteredModule[] {
    return Array.from(this.modules.values());
  }

  unregister(moduleName: string): boolean {
    return this.modules.delete(moduleName);
  }

  isRegistered(moduleName: string): boolean {
    return this.modules.has(moduleName);
  }

  getActiveModules(): RegisteredModule[] {
    return this.getAll().filter(module => module.status === 'active');
  }

  getAutoGeneratedModules(): RegisteredModule[] {
    return this.getAll().filter(module => module.isAutoGenerated === true);
  }

  getStats(): RegistryStats {
    const modules = this.getAll();
    const allComponents = this.getAllComponents();
    
    return {
      total: modules.length,
      active: modules.filter(m => m.status === 'active').length,
      deprecated: modules.filter(m => m.status === 'deprecated').length,
      development: modules.filter(m => m.status === 'development').length,
      autoGenerated: modules.filter(m => m.isAutoGenerated).length,
      totalComponents: allComponents.filter(c => c.component.type === 'component').length,
      totalServices: allComponents.filter(c => c.component.type === 'service').length,
      totalHooks: allComponents.filter(c => c.component.type === 'hook').length,
      protectedComponents: allComponents.filter(c => c.component.isProtected).length,
      lastUpdated: new Date()
    };
  }

  getAllComponents(): { moduleName: string; component: ComponentServiceInfo }[] {
    const result: { moduleName: string; component: ComponentServiceInfo }[] = [];
    
    this.modules.forEach((module, moduleName) => {
      const allItems = [
        ...(module.components || []),
        ...(module.services || []),
        ...(module.hooks || [])
      ];
      
      allItems.forEach(component => {
        result.push({ moduleName, component });
      });
    });
    
    return result;
  }

  getModuleComponentsForRBAC(moduleName: string): ComponentServiceInfo[] {
    const module = this.modules.get(moduleName);
    if (!module) {
      return [];
    }

    return [
      ...(module.components || []),
      ...(module.services || []),
      ...(module.hooks || [])
    ];
  }

  getAutoConfig(): AutoRegistrationConfig {
    return { ...this.autoConfig };
  }

  updateAutoConfig(config: Partial<AutoRegistrationConfig>): void {
    this.autoConfig = { ...this.autoConfig, ...config };
  }

  export(): { modules: RegisteredModule[]; config: AutoRegistrationConfig; stats: RegistryStats } {
    return {
      modules: this.getAll(),
      config: this.getAutoConfig(),
      stats: this.getStats()
    };
  }
}

export const moduleRegistry = new ModuleRegistry();
