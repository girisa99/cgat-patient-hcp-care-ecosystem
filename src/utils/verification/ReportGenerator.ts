
/**
 * Report Generator
 * Utility for generating comprehensive system reports
 */

import { ComprehensiveValidationResult } from './ComprehensiveSystemValidator';

export class ReportGenerator {
  /**
   * Generate comprehensive system report
   */
  static generateComprehensiveReport(result: ComprehensiveValidationResult): string {
    const report = `
# COMPREHENSIVE SYSTEM VALIDATION REPORT
Generated: ${new Date(result.timestamp).toLocaleString()}

## Executive Summary
- **Overall Score**: ${result.overallScore}/100
- **System Status**: ${result.systemStatus}
- **Critical Issues**: ${result.criticalIssues.length}
- **Action Items**: ${result.actionPlan.length}
- **Estimated Cleanup Time**: ${result.estimatedCleanupTime}

## Single Source Compliance
- **Compliance Score**: ${result.singleSourceCompliance.score}%
- **Violations Found**: ${result.singleSourceCompliance.violations.length}
- **Compliant Systems**: ${result.singleSourceCompliance.compliantSystems.length}

## Code Quality Analysis
### Duplicates
- **Components**: ${result.codeQuality.duplicates.components.length}
- **Hooks**: ${result.codeQuality.duplicates.hooks.length}
- **Services**: ${result.codeQuality.duplicates.services.length}
- **Utilities**: ${result.codeQuality.duplicates.utilities.length}
- **Types**: ${result.codeQuality.duplicates.types.length}

### Dead Code
- **Unused Files**: ${result.codeQuality.deadCode.unusedFiles.length}
- **Unused Functions**: ${result.codeQuality.deadCode.unusedFunctions.length}
- **Unused Imports**: ${result.codeQuality.deadCode.unusedImports.length}
- **Unused Components**: ${result.codeQuality.deadCode.unusedComponents.length}

### Naming Consistency
- **Score**: ${result.codeQuality.namingConsistency.score}%
- **Violations**: ${result.codeQuality.namingConsistency.violations.length}

## Database Analysis
- **Total Tables**: ${result.database.tables.total}
- **Missing Indexes**: ${result.database.tables.missingIndexes.length}
- **Total Relationships**: ${result.database.relationships.total}
- **Schema Inconsistencies**: ${result.database.schemas.inconsistencies.length}

## Module Registry Analysis
- **Total Modules**: ${result.moduleRegistry.totalModules}
- **Duplicate Modules**: ${result.moduleRegistry.duplicateModules.length}
- **Orphaned Components**: ${result.moduleRegistry.orphanedComponents.length}

## TypeScript Analysis
- **Duplicate Types**: ${result.typescript.duplicateTypes.length}
- **Unused Types**: ${result.typescript.unusedTypes.length}
- **Missing Types**: ${result.typescript.missingTypes.length}

## Critical Issues
${result.criticalIssues.map((issue, index) => `${index + 1}. ${issue}`).join('\n')}

## Action Plan
${result.actionPlan.map((action, index) => `${index + 1}. ${action}`).join('\n')}

## Recommendations
${result.singleSourceCompliance.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

---
Report generated by Comprehensive System Validator
    `.trim();

    return report;
  }

  /**
   * Generate summary report
   */
  static generateSummaryReport(result: ComprehensiveValidationResult): string {
    return `
System Health: ${result.overallScore}/100 (${result.systemStatus})
Critical Issues: ${result.criticalIssues.length}
Estimated Fix Time: ${result.estimatedCleanupTime}
    `.trim();
  }
}
