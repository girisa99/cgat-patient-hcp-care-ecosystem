
import { useEffect, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { moduleRegistry } from '@/utils/moduleRegistry';

interface RealtimeConfig {
  enableNotifications?: boolean;
  areas?: string[];
}

export const useRealtime = (config: RealtimeConfig = {}) => {
  const { toast } = useToast();
  const channelRef = useRef<any>(null);

  useEffect(() => {
    if (!config.enableNotifications) return;

    console.log('🔄 Initializing real-time subscriptions for areas:', config.areas);

    // Create a channel for real-time updates
    channelRef.current = supabase
      .channel('admin-realtime')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'profiles' },
        (payload) => {
          console.log('👤 User data changed:', payload);
          if (config.areas?.includes('userManagement')) {
            toast({
              title: "User Data Updated",
              description: "User information has been updated in real-time",
            });
          }
        }
      )
      .on('postgres_changes',
        { event: '*', schema: 'public', table: 'facilities' },
        (payload) => {
          console.log('🏥 Facility data changed:', payload);
          if (config.areas?.includes('facility')) {
            toast({
              title: "Facility Updated",
              description: "Facility information has been updated",
            });
          }
        }
      )
      .on('postgres_changes',
        { event: 'INSERT', schema: 'public' },
        (payload) => {
          console.log('📦 New table detected:', payload.table);
          
          // Auto-register new modules when tables are created
          if (payload.table && !moduleRegistry.isRegistered(payload.table)) {
            const newModule = {
              moduleName: payload.table,
              tableName: payload.table,
              requiredFields: ['id'],
              optionalFields: [],
              version: '1.0.0',
              lastUpdated: new Date(),
              status: 'active' as const,
              isAutoGenerated: true,
              description: `Auto-detected module for table: ${payload.table}`
            };
            
            moduleRegistry.register(newModule);
            
            toast({
              title: "New Module Detected",
              description: `Auto-registered module for table: ${payload.table}`,
            });
          }
        }
      )
      .subscribe();

    return () => {
      if (channelRef.current) {
        console.log('🔌 Cleaning up real-time subscription');
        supabase.removeChannel(channelRef.current);
      }
    };
  }, [config.enableNotifications, config.areas, toast]);

  return {
    isConnected: !!channelRef.current
  };
};

// Admin-specific realtime hook
export const useAdminRealtime = (config: RealtimeConfig = {}) => {
  return useRealtime({
    enableNotifications: true,
    areas: ['userManagement', 'rbac', 'facility', 'modules'],
    ...config
  });
};
